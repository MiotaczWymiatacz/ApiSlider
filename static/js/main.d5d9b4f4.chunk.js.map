{"version":3,"sources":["components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Result","props","err","stateValues","slugs","images","values","value","push","src","alt","className","App","state","currentImageIndex","handlePictureShow","e","preventDefault","fetch","then","response","checkResponseStatus","json","data","handleResponse","catch","console","log","chosenPictures","this","choosePictures","setState","extractsSlugs","ok","Error","currentIndexTemp","i","length","map","image","url","slice","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAiBeA,G,MAdA,SAACC,GAAW,IACVC,EADS,EACDD,EAAME,YAArBC,EADgB,EAChBA,MAEFC,EAAS,GACf,IAJwB,EACTH,KAGHE,EAAO,CAAC,IAAD,gBACGA,EAAME,UADT,IACjB,2BAAoC,CAAC,IAA1BC,EAAyB,QAClCF,EAAOG,KACL,yBAAKC,IAAG,qCAAgCF,GAASG,IAAI,WAHxC,+BAQnB,OAAO,yBAAKC,UAAU,WAAWN,KCuDpBO,G,kNAjEbC,MAAQ,CACNT,MAAO,GACPU,kBAAmB,EACnBZ,KAAK,G,EAGPa,kBAAoB,SAACC,GACnBA,EAAEC,iBAGFC,MAFS,iCAGNC,MAAK,SAACC,GAAD,OAAc,EAAKC,oBAAoBD,MAC5CD,MAAK,SAACC,GAAD,OAAcA,EAASE,UAC5BH,MAAK,SAACI,GAAD,OAAU,EAAKC,eAAeD,MACnCE,OAAM,SAACvB,GACNwB,QAAQC,IAAIzB,O,6DAIHqB,GAAO,IAAD,OACfK,EAAiBC,KAAKC,eAAeP,GAEzCM,KAAKE,UAAS,iBAAO,CACnB7B,KAAK,EACLE,MAAO,EAAK4B,cAAcJ,S,0CAIVR,GAClB,GAAIA,EAASa,GACX,OAAOb,EAET,MAAMc,MAAM,W,qCAGC7B,GAIb,IAHA,IACIuB,EAAiB,GACjBO,EAAmBN,KAAKhB,MAAMC,kBACzBsB,EAAI,EAAGA,EAHS,EAGaA,IAAKD,IACrCA,IAAqB9B,EAAOgC,SAC9BF,EAAmB,GAErBP,EAAepB,KAAKH,EAAO8B,IAK7B,OAHAN,KAAKE,UAAS,iBAAO,CACnBjB,kBAAmBqB,MAEdP,I,oCAGKvB,GACZ,OAAOA,EAAOiC,KAAI,SAACC,GAAD,OAAWA,EAAMC,IAAIC,MAAM,S,+BAI7C,OACE,yBAAK9B,UAAU,OACb,4BAAQ+B,QAASb,KAAKd,mBAAtB,QACA,kBAAC,EAAD,CAAQZ,YAAa0B,KAAKhB,a,GA5DhB8B,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.d5d9b4f4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Result.css\";\r\n\r\nconst Result = (props) => {\r\n  const { slugs, err } = props.stateValues;\r\n\r\n  const images = [];\r\n  if (!err && slugs) {\r\n    for (const value of slugs.values()) {\r\n      images.push(\r\n        <img src={`http://source.unsplash.com/${value}`} alt=\"Logo\" />\r\n      );\r\n    }\r\n  }\r\n\r\n  return <div className=\"wrapper\">{images}</div>;\r\n};\r\nexport default Result;\r\n","import React, { Component } from \"react\";\nimport Result from \"./Result\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    slugs: [],\n    currentImageIndex: 0,\n    err: false,\n  };\n\n  handlePictureShow = (e) => {\n    e.preventDefault();\n    const API = `https://picsum.photos/v2/list`;\n\n    fetch(API)\n      .then((response) => this.checkResponseStatus(response))\n      .then((response) => response.json())\n      .then((data) => this.handleResponse(data))\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  handleResponse(data) {\n    let chosenPictures = this.choosePictures(data);\n\n    this.setState(() => ({\n      err: false,\n      slugs: this.extractsSlugs(chosenPictures),\n    }));\n  }\n\n  checkResponseStatus(response) {\n    if (response.ok) {\n      return response;\n    }\n    throw Error(\"Error\");\n  }\n\n  choosePictures(images) {\n    const numberOfPictures = 3;\n    let chosenPictures = [];\n    let currentIndexTemp = this.state.currentImageIndex;\n    for (let i = 0; i < numberOfPictures; i++, currentIndexTemp++) {\n      if (currentIndexTemp === images.length) {\n        currentIndexTemp = 0;\n      }\n      chosenPictures.push(images[currentIndexTemp]);\n    }\n    this.setState(() => ({\n      currentImageIndex: currentIndexTemp,\n    }));\n    return chosenPictures;\n  }\n\n  extractsSlugs(images) {\n    return images.map((image) => image.url.slice(28));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.handlePictureShow}>Next</button>\n        <Result stateValues={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}